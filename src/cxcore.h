// This is an autogenerated C header file from project cxcore

#ifndef _CXCORE_H_
#define _CXCORE_H_

#include <cx.h>

//
// Forward type declarations
//

struct CX_ID_3(cxcore, System, Object);
struct CX_ID_3(cxcore, System, Nullable);
struct CX_ID_4(cxcore, System, Reflection, TypeInfo);
struct CX_ID_4(cxcore, System, Reflection, VersionInfo);
struct CX_ID_3(cxcore, System, Array);
struct CX_ID_3(cxcore, System, Attribute);
struct CX_ID_3(cxcore, System, Bool);
struct CX_ID_3(cxcore, System, Byte);
struct CX_ID_3(cxcore, System, Char);
struct CX_ID_3(cxcore, System, Console);
struct CX_ID_3(cxcore, System, DateTime);
struct CX_ID_3(cxcore, System, Double);
struct CX_ID_3(cxcore, System, Environment);
struct CX_ID_3(cxcore, System, Exception);
struct CX_ID_3(cxcore, System, Float);
struct CX_ID_3(cxcore, System, IDateTimeProvider);
struct CX_ID_3(cxcore, System, IReader);
struct CX_ID_3(cxcore, System, IWriter);
struct CX_ID_3(cxcore, System, Int);
struct CX_ID_3(cxcore, System, Long);
struct CX_ID_3(cxcore, System, Math);
struct CX_ID_3(cxcore, System, Memory);
struct CX_ID_3(cxcore, System, Random);
struct CX_ID_4(cxcore, System, Reflection, FieldInfo);
struct CX_ID_4(cxcore, System, Reflection, FunctionInfo);
struct CX_ID_4(cxcore, System, Reflection, FunctionParamInfo);
struct CX_ID_4(cxcore, System, Reflection, ModuleInfo);
struct CX_ID_3(cxcore, System, SByte);
struct CX_ID_3(cxcore, System, Short);
struct CX_ID_3(cxcore, System, String);
struct CX_ID_3(cxcore, System, SystemDateTimeProvider);
struct CX_ID_3(cxcore, System, TimeSpan);
struct CX_ID_3(cxcore, System, UInt);
struct CX_ID_3(cxcore, System, ULong);
struct CX_ID_3(cxcore, System, UShort);
struct CX_ID_3(cxcore, System, Uuid);
struct CX_ID_3(cxcore, System, Void);

//
// Type declarations
//

CX_TYPE_DEF(CX_ID_3(cxcore, System, Object)) {
    void* __vtable;
    cx_ptr _gc;
};
CX_TYPE_DEF(CX_ID_3(cxcore, System, Nullable)) {
    cx_ptr _obj;
};
CX_TYPE_DEF(CX_ID_4(cxcore, System, Reflection, TypeInfo)) {
    cx_ulong Hash;
    cx_uint Flags;
    cx_uint Size;
    struct CX_ID_3(cxcore, System, String)* Name;
    struct CX_ID_3(cxcore, System, String)* Namespace;
    struct CX_ID_3(cxcore, System, Array)* GenericParams;
    struct CX_ID_3(cxcore, System, Nullable) BaseType;
    struct CX_ID_3(cxcore, System, Array)* Interfaces;
    struct CX_ID_3(cxcore, System, Array)* Fields;
    struct CX_ID_3(cxcore, System, Array)* Functions;
};
CX_TYPE_DEF(CX_ID_4(cxcore, System, Reflection, VersionInfo)) {
    cx_int Major;
    cx_int Minor;
    cx_int Patch;
    cx_int Revision;
};
CX_TYPE_DEF(CX_ID_3(cxcore, System, Array)) {
    struct CX_ID_3(cxcore, System, Object) __base;
    cx_uint _length;
    cx_ptr _data;
};
CX_TYPE_DEF(CX_ID_3(cxcore, System, Attribute)) {
    struct CX_ID_3(cxcore, System, Object) __base;
};
CX_TYPE_DEF(CX_ID_3(cxcore, System, Bool)) {
    cx_bool _value;
};
CX_TYPE_DEF(CX_ID_3(cxcore, System, Byte)) {
    cx_byte _value;
};
CX_TYPE_DEF(CX_ID_3(cxcore, System, Char)) {
    cx_char _value;
};
CX_STATIC_TYPE_DEF(CX_ID_3(cxcore, System, Console));
CX_TYPE_DEF(CX_ID_3(cxcore, System, DateTime)) {
    cx_ulong _ticks;
    cx_short _offset;
};
CX_TYPE_DEF(CX_ID_3(cxcore, System, Double)) {
    cx_double _value;
};
CX_STATIC_TYPE_DEF(CX_ID_3(cxcore, System, Environment));
CX_TYPE_DEF(CX_ID_3(cxcore, System, Exception)) {
    struct CX_ID_3(cxcore, System, Object) __base;
};
CX_TYPE_DEF(CX_ID_3(cxcore, System, Float)) {
    cx_float _value;
};
CX_TYPE_DEF(CX_ID_3(cxcore, System, IDateTimeProvider)) {
    void* __vtable;
    void* __root;
};
CX_TYPE_DEF(CX_ID_3(cxcore, System, IReader)) {
    void* __vtable;
    void* __root;
};
CX_TYPE_DEF(CX_ID_3(cxcore, System, IWriter)) {
    void* __vtable;
    void* __root;
};
CX_TYPE_DEF(CX_ID_3(cxcore, System, Int)) {
    cx_int _value;
};
CX_TYPE_DEF(CX_ID_3(cxcore, System, Long)) {
    cx_long _value;
};
CX_STATIC_TYPE_DEF(CX_ID_3(cxcore, System, Math));
CX_STATIC_TYPE_DEF(CX_ID_3(cxcore, System, Memory));
CX_TYPE_DEF(CX_ID_3(cxcore, System, Random)) {
    cx_uint _seed;
};
CX_TYPE_DEF(CX_ID_4(cxcore, System, Reflection, FieldInfo)) {
    cx_uint Flags;
    cx_uint Offset;
    struct CX_ID_4(cxcore, System, Reflection, TypeInfo) Type;
    struct CX_ID_3(cxcore, System, String)* Name;
};
CX_TYPE_DEF(CX_ID_4(cxcore, System, Reflection, FunctionInfo)) {
    cx_uint Flags;
    cx_uint Offset;
    struct CX_ID_4(cxcore, System, Reflection, TypeInfo) ReturnType;
    struct CX_ID_3(cxcore, System, String)* Name;
    struct CX_ID_3(cxcore, System, Array)* Params;
};
CX_TYPE_DEF(CX_ID_4(cxcore, System, Reflection, FunctionParamInfo)) {
    cx_uint Flags;
    struct CX_ID_4(cxcore, System, Reflection, TypeInfo) Type;
    struct CX_ID_3(cxcore, System, String)* Name;
    cx_ptr DefaultValue;
};
CX_TYPE_DEF(CX_ID_4(cxcore, System, Reflection, ModuleInfo)) {
    cx_uint Flags;
    struct CX_ID_3(cxcore, System, String)* Name;
    struct CX_ID_4(cxcore, System, Reflection, VersionInfo) Version;
    struct CX_ID_3(cxcore, System, String)* Description;
    struct CX_ID_3(cxcore, System, String)* Author;
    struct CX_ID_3(cxcore, System, Array)* Types;
};
CX_TYPE_DEF(CX_ID_3(cxcore, System, SByte)) {
    cx_sbyte _value;
};
CX_TYPE_DEF(CX_ID_3(cxcore, System, Short)) {
    cx_short _value;
};
CX_TYPE_DEF(CX_ID_3(cxcore, System, String)) {
    struct CX_ID_3(cxcore, System, Object) __base;
    cx_uint _length;
    cx_ptr _data;
};
CX_TYPE_DEF(CX_ID_3(cxcore, System, SystemDateTimeProvider)) {
    struct CX_ID_3(cxcore, System, Object) __base;
};
CX_TYPE_DEF(CX_ID_3(cxcore, System, TimeSpan)) {
    cx_ulong _ticks;
};
CX_TYPE_DEF(CX_ID_3(cxcore, System, UInt)) {
    cx_uint _value;
};
CX_TYPE_DEF(CX_ID_3(cxcore, System, ULong)) {
    cx_ulong _value;
};
CX_TYPE_DEF(CX_ID_3(cxcore, System, UShort)) {
    cx_ushort _value;
};
CX_TYPE_DEF(CX_ID_3(cxcore, System, Uuid)) {
    cx_uint _a;
    cx_uint _b;
    cx_uint _c;
    cx_uint _d;
};
CX_TYPE_DEF(CX_ID_3(cxcore, System, Void)) {
    cx_byte __dummy;
};

//
// Function declarations
//

extern CX_EXPORT cx_ulong CX_ID_4(cxcore, System, Object, GetHash)(
    struct CX_ID_3(cxcore, System, Object)* __this
);
extern CX_EXPORT cx_bool CX_ID_4(cxcore, System, Char, IsBetween)(    
    cx_char c,
    cx_char min,
    cx_char max
);
extern CX_EXPORT cx_bool CX_ID_4(cxcore, System, Char, IsDigit)(    
    cx_char c
);
extern CX_EXPORT cx_bool CX_ID_4(cxcore, System, Char, IsLetter)(    
    cx_char c
);
extern CX_EXPORT cx_bool CX_ID_4(cxcore, System, Char, IsWhiteSpace)(    
    cx_char c
);
extern CX_EXPORT cx_bool CX_ID_4(cxcore, System, Char, IsLower)(    
    cx_char c
);
extern CX_EXPORT cx_bool CX_ID_4(cxcore, System, Char, IsUpper)(    
    cx_char c
);
extern CX_EXPORT cx_char CX_ID_4(cxcore, System, Char, ToLower)(
    struct CX_ID_3(cxcore, System, Char)* __this
);
extern CX_EXPORT cx_char CX_ID_4(cxcore, System, Char, ToUpper)(
    struct CX_ID_3(cxcore, System, Char)* __this
);
extern CX_EXPORT struct CX_ID_3(cxcore, System, String)* CX_ID_4(cxcore, System, Console, Read)(    
    cx_uint length
);
extern CX_EXPORT struct CX_ID_3(cxcore, System, String)* CX_ID_4(cxcore, System, Console, ReadLine)();
extern CX_EXPORT cx_uint CX_ID_4(cxcore, System, Console, Write)(    
    struct CX_ID_3(cxcore, System, String)* str
);
extern CX_EXPORT cx_uint CX_ID_4(cxcore, System, Console, WriteLine)(    
    struct CX_ID_3(cxcore, System, String)* str
);
extern CX_EXPORT struct CX_ID_3(cxcore, System, DateTime) CX_ID_4(cxcore, System, DateTime, AddYears)(
    struct CX_ID_3(cxcore, System, DateTime)* __this
,    
    cx_int years
);
extern CX_EXPORT struct CX_ID_3(cxcore, System, DateTime) CX_ID_4(cxcore, System, DateTime, AddMonths)(
    struct CX_ID_3(cxcore, System, DateTime)* __this
,    
    cx_int months
);
extern CX_EXPORT struct CX_ID_3(cxcore, System, DateTime) CX_ID_4(cxcore, System, DateTime, AddDays)(
    struct CX_ID_3(cxcore, System, DateTime)* __this
,    
    cx_int days
);
extern CX_EXPORT struct CX_ID_3(cxcore, System, DateTime) CX_ID_4(cxcore, System, DateTime, AddHours)(
    struct CX_ID_3(cxcore, System, DateTime)* __this
,    
    cx_int hours
);
extern CX_EXPORT struct CX_ID_3(cxcore, System, DateTime) CX_ID_4(cxcore, System, DateTime, AddMinutes)(
    struct CX_ID_3(cxcore, System, DateTime)* __this
,    
    cx_int minutes
);
extern CX_EXPORT struct CX_ID_3(cxcore, System, DateTime) CX_ID_4(cxcore, System, DateTime, AddSeconds)(
    struct CX_ID_3(cxcore, System, DateTime)* __this
,    
    cx_int seconds
);
extern CX_EXPORT struct CX_ID_3(cxcore, System, DateTime) CX_ID_4(cxcore, System, DateTime, AddMilliseconds)(
    struct CX_ID_3(cxcore, System, DateTime)* __this
,    
    cx_int milliseconds
);
extern CX_EXPORT void CX_ID_4(cxcore, System, Exception, Throw)(    
    struct CX_ID_3(cxcore, System, Exception)* exception
);
extern CX_EXPORT struct CX_ID_3(cxcore, System, DateTime) CX_ID_4(cxcore, System, IDateTimeProvider, GetUtcNow)(
    struct CX_ID_3(cxcore, System, IDateTimeProvider)* __this
);
extern CX_EXPORT struct CX_ID_3(cxcore, System, DateTime) CX_ID_4(cxcore, System, IDateTimeProvider, GetLocalNow)(
    struct CX_ID_3(cxcore, System, IDateTimeProvider)* __this
);
extern CX_EXPORT cx_uint CX_ID_4(cxcore, System, IReader, Read)(
    struct CX_ID_3(cxcore, System, IReader)* __this
,    
    cx_uint length,
    cx_ptr buf
);
extern CX_EXPORT cx_uint CX_ID_4(cxcore, System, IWriter, Write)(
    struct CX_ID_3(cxcore, System, IWriter)* __this
,    
    cx_uint length,
    cx_ptr buf
);
extern CX_EXPORT cx_ptr CX_ID_4(cxcore, System, Memory, Alloc)(    
    cx_uint size
);
extern CX_EXPORT cx_ptr CX_ID_4(cxcore, System, Memory, Realloc)(    
    cx_ptr block,
    cx_uint size
);
extern CX_EXPORT void CX_ID_4(cxcore, System, Memory, Free)(    
    cx_ptr block
);
extern CX_EXPORT void CX_ID_4(cxcore, System, Memory, Copy)(    
    cx_ptr dest,
    cx_ptr src,
    cx_uint size
);
extern CX_EXPORT struct CX_ID_3(cxcore, System, Random) CX_ID_4(cxcore, System, Random, Create)();
extern CX_EXPORT cx_byte CX_ID_4(cxcore, System, Random, NextByte)(
    struct CX_ID_3(cxcore, System, Random)* __this
);
extern CX_EXPORT cx_byte CX_ID_4(cxcore, System, Random, NextByte)(
    struct CX_ID_3(cxcore, System, Random)* __this
,    
    cx_byte min,
    cx_byte max
);
extern CX_EXPORT cx_char CX_ID_4(cxcore, System, Random, NextChar)(
    struct CX_ID_3(cxcore, System, Random)* __this
,    
    cx_char min,
    cx_char max
);
extern CX_EXPORT cx_short CX_ID_4(cxcore, System, Random, NextShort)(
    struct CX_ID_3(cxcore, System, Random)* __this
);
extern CX_EXPORT cx_short CX_ID_4(cxcore, System, Random, NextShort)(
    struct CX_ID_3(cxcore, System, Random)* __this
,    
    cx_short min,
    cx_short max
);
extern CX_EXPORT cx_int CX_ID_4(cxcore, System, Random, NextInt)(
    struct CX_ID_3(cxcore, System, Random)* __this
);
extern CX_EXPORT cx_int CX_ID_4(cxcore, System, Random, NextInt)(
    struct CX_ID_3(cxcore, System, Random)* __this
,    
    cx_int min,
    cx_int max
);
extern CX_EXPORT cx_long CX_ID_4(cxcore, System, Random, NextLong)(
    struct CX_ID_3(cxcore, System, Random)* __this
);
extern CX_EXPORT cx_long CX_ID_4(cxcore, System, Random, NextLong)(
    struct CX_ID_3(cxcore, System, Random)* __this
,    
    cx_long min,
    cx_long max
);
extern CX_EXPORT cx_float CX_ID_4(cxcore, System, Random, NextFloat)(
    struct CX_ID_3(cxcore, System, Random)* __this
);
extern CX_EXPORT cx_float CX_ID_4(cxcore, System, Random, NextFloat)(
    struct CX_ID_3(cxcore, System, Random)* __this
,    
    cx_float min,
    cx_float max
);
extern CX_EXPORT cx_double CX_ID_4(cxcore, System, Random, NextDouble)(
    struct CX_ID_3(cxcore, System, Random)* __this
);
extern CX_EXPORT cx_double CX_ID_4(cxcore, System, Random, NextDouble)(
    struct CX_ID_3(cxcore, System, Random)* __this
,    
    cx_double min,
    cx_double max
);
extern CX_EXPORT struct CX_ID_3(cxcore, System, DateTime) CX_ID_4(cxcore, System, SystemDateTimeProvider, GetUtcNow)(
    struct CX_ID_3(cxcore, System, SystemDateTimeProvider)* __this
);
extern CX_EXPORT struct CX_ID_3(cxcore, System, DateTime) CX_ID_4(cxcore, System, SystemDateTimeProvider, GetLocalNow)(
    struct CX_ID_3(cxcore, System, SystemDateTimeProvider)* __this
);
extern CX_EXPORT struct CX_ID_3(cxcore, System, TimeSpan) CX_ID_4(cxcore, System, TimeSpan, AddDays)(
    struct CX_ID_3(cxcore, System, TimeSpan)* __this
,    
    cx_int days
);
extern CX_EXPORT struct CX_ID_3(cxcore, System, TimeSpan) CX_ID_4(cxcore, System, TimeSpan, AddHours)(
    struct CX_ID_3(cxcore, System, TimeSpan)* __this
,    
    cx_int hours
);
extern CX_EXPORT struct CX_ID_3(cxcore, System, TimeSpan) CX_ID_4(cxcore, System, TimeSpan, AddMinutes)(
    struct CX_ID_3(cxcore, System, TimeSpan)* __this
,    
    cx_int minutes
);
extern CX_EXPORT struct CX_ID_3(cxcore, System, TimeSpan) CX_ID_4(cxcore, System, TimeSpan, AddSeconds)(
    struct CX_ID_3(cxcore, System, TimeSpan)* __this
,    
    cx_int seconds
);
extern CX_EXPORT struct CX_ID_3(cxcore, System, TimeSpan) CX_ID_4(cxcore, System, TimeSpan, AddMilliseconds)(
    struct CX_ID_3(cxcore, System, TimeSpan)* __this
,    
    cx_int milliseconds
);


#endif // _CXCORE_H_
